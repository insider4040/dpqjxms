#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <windows.h>

#define UP 72
#define ARROW 224
#define BIGZ 90
#define SMALLZ 122

//좌표 받을 전역변수, 좌표는 0->19 = 25-> ~ 이런식으로
int coord_x[20];
int coord_y[20];

typedef struct _STAIRS {
    char stair[4];
}STAIRS;

void gotoxy(int x, int y)
{
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

//틀 출력시키기
void print_frame();
//처음에 계단 출력
void print_normalstair(int x, int y, const STAIRS arr[], int com[], int com2[]);
//왼쪽 그대로 진행하는 함수
void normal_direction(int* x, int* y, const STAIRS arr[], int com[], int com2[], int cnt);
//방향 바꾸는 함수
void change_direction(int* x, int* y, const STAIRS arr[], int cnt);

int main()
{
    srand((unsigned)time(NULL));        //겹치는 거 없이 난수 생성시키게 해줌
    int y = 25;
    int x = 30;
    int key;
    int chr_x = 34;  //캐릭터의 x 좌표, 이동할 때 -2씩
    int chr_y = 25;  //캐릭터의 y 좌표, 이동할 때 -1씩
    int* ptr_x;
    int* ptr_y;
    ptr_x = &chr_x; //캐릭터 x좌표의 주소를 저장
    ptr_y = &chr_y; //캐릭터 y좌표의 주소를 저장

    //구조체 포인터 배열 동적할당
    STAIRS* arr = (STAIRS*)malloc(sizeof(STAIRS) * 20);

    //구조체 안에 stair -> ###으로 초기화 시켜주기
    for (int i = 0; i < 20; ++i)
    {
        strcpy(arr[i].stair, "###");
    }

    int num[20];
    int num2[20];
    for (int i = 0; i < 20; ++i)
    {
        num[i] = (rand() % 100 < 38) ? 0 : 1;
        num2[i] = (rand() % 100 < 50) ? 1 : 0;
    }

    //틀 출력
    print_frame();

    //처음에 계단 출력
    print_normalstair(x, y, arr, num, num2);

    //처음에 캐릭터 위치, 출력
    gotoxy(chr_x, chr_y);
    printf("@");

    int count = 0;

    while (1)
    {
        key = _getch();

        if (key == ARROW)
        {
            key = _getch();
        }

        switch (key)
        {
        case UP:
        {
            //원래 방향 그대로
            normal_direction(ptr_x, ptr_y, arr, num, num2, count);

            break;
        }
        case BIGZ:
        {
            change_direction(ptr_x, ptr_y, arr, count);
            ++count;
            break;
        }
        case SMALLZ:
        {
            ++count;
            //방향 바꿔주기
            change_direction(ptr_x, ptr_y, arr, count);

            break;
        }
        }
    }
    return 0;
}

void print_frame()
{
    char frame_garo = '-';  //가로
    char frame_sero = '|';  //세로

    for (int i = 0; i < 3; ++i)
    {
        printf("\n");
    }

    printf("%13c", frame_garo);
    for (int i = 0; i < 60; ++i)
    {
        printf("%c", frame_garo);
    }

    printf("\n");
    printf("%12c %61c\n", frame_sero, frame_sero);
    for (int i = 0; i < 22; ++i)
    {
        printf("%12c %61c\n", frame_sero, frame_sero);
    }

    /*printf("%13c", frame_garo);
    for (int i = 0; i < 60; ++i)
    {
        printf("%c", frame_garo);
    }*/
}

void print_normalstair(int x, int y, const STAIRS arr[], int com[], int com2[])
{
    int cnt = 0;

    for (int i = 0; i < 20; ++i)
    {
        if (y == 0)
        {
            break;
        }

        coord_x[i] = x;
        coord_y[i] = y;
        gotoxy(x, y);
        printf("%s", arr[i].stair);

        y -= 1;


        //두 번째 칸은 무조건 왼쪽에 나오게
        if (y == 24)
        {
            x -= 3;
        }
        else if (y != 24)
        {
            if (com[i] == com2[i])
            {
                x += 3;
            }
            else if (com[i] != com2[i])
            {
                x -= 3;

            }
        }
    }
}

void change_direction(int* x, int* y, const STAIRS arr[], int cnt)
{
    /*gotoxy(*chr_x, *chr_y);
    printf(" ");

    *chr_x += 3;
    *chr_y -= 1;

    gotoxy(*chr_x, *chr_y);
    printf("@");*/

    system("cls");
    print_frame();

    //캐릭터 고정된 위치에 출력
    gotoxy(*x, *y);
    printf("@");

    //캐릭터가 오른쪽으로 올라가는 것처럼 보이게 하기
    if (cnt % 2 == 0)
    {
        //밑으로 내리는거
        for (int i = 0; i < 20; ++i)
        {
            coord_y[i] += 1;
            coord_x[i] -= 3;

            gotoxy(coord_x[i], coord_y[i]);
            printf("%s", arr[i].stair);

            if (coord_y[i] == 28)
            {
                strcpy(arr[i].stair, " ");
            }
        }
    }
    //캐릭터가 왼쪽으로 올라가는 것처럼 보이게 하기
    else if (cnt % 2 != 0)
    {
        //밑으로 내리기
        for (int i = 0; i < 20; ++i)
        {
            coord_y[i] += 1;
            coord_x[i] += 3;

            gotoxy(coord_x[i], coord_y[i]);
            printf("%s", arr[i].stair);

            if (coord_y[i] == 28)
            {
                strcpy(arr[i].stair, " ");
            }
        }
    }
}

void normal_direction(int* x, int* y, const STAIRS arr[], int com[], int com2[], int cnt)   //garo: x축, sero: y축
{
    system("cls");
    print_frame();

    //캐릭터 고정된 위치에 출력
    gotoxy(*x, *y);
    printf("@");

    //맨위에 계단 출력시키기
    if (com[0] == com2[0])
    {
        gotoxy(coord_x[19] + 6, coord_y[19]);
        printf("%s", arr[0].stair);
    }
    else if (com[0] != com2[0])
    {
        gotoxy(coord_x[19], coord_y[19]);
        printf("%s", arr[0].stair);
    }

    //(25, 30) 좌표에 있는 것은 무조건 캐릭터 밑에 오게 만들기
    gotoxy(coord_x[0] + 3, coord_y[0] + 1);
    printf("%s", arr[0].stair);

    //캐릭터 왼쪽으로 올라가게 한느 것처럼 보이게 하기.
    if (cnt % 2 == 0)
    {
        //밑으로 내리기
        for (int i = 0; i < 20; ++i)
        {
            coord_y[i] += 1;
            coord_x[i] += 3;

            gotoxy(coord_x[i], coord_y[i]);
            printf("%s", arr[i].stair);

            if (coord_y[i] == 28)
            {
                strcpy(arr[i].stair, " ");
            }
        }
    }

    //캐릭터 오른쪽으로 올라가는 것처럼 보이게 하기
    else if (cnt % 2 != 0)
    {
        //밑으로 내리는거
        for (int i = 0; i < 20; ++i)
        {
            coord_y[i] += 1;
            coord_x[i] -= 3;

            gotoxy(coord_x[i], coord_y[i]);
            printf("%s", arr[i].stair);

            if (coord_y[i] == 28)
            {
                strcpy(arr[i].stair, " ");
            }
        }
    }
}
