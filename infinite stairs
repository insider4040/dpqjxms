#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <windows.h>

#define UP 72
#define ARROW 224
#define LEFT 75
#define RIGHT 77
#define BIGZ 90
#define SMALLZ 122

typedef struct _STAIRS {
    char stair[4];
}STAIRS;

void gotoxy(int x, int y) 
{
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

//틀 출력시키기
void print_frame();
//처음에 계단 출력
void print_normalstair(int x, int y);
//왼쪽 그대로 진행하는 함수
void normal_direction(int* x, int* y);
//방향 바꾸는 함수
void change_direction(int* chr_x, int* chr_y);

int main() 
{
    srand((unsigned)time(NULL));        //겹치는 거 없이 난수 생성시키게 해줌
    int y = 25;
    int x = 40;
    int key;
    int chr_x = 44;  //캐릭터의 x 좌표, 이동할 때 -2씩
    int chr_y = 25;  //캐릭터의 y 좌표, 이동할 때 -1씩
    int* ptr_x;
    int* ptr_y;
    ptr_x = &chr_x; //캐릭터 x좌표의 주소를 저장
    ptr_y = &chr_y; //캐릭터 y좌표의 주소를 저장

    //틀 출력
    print_frame();

    //처음에 계단 출력
    print_normalstair(x, y);

    //처음에 캐릭터 위치, 출력
    gotoxy(chr_x, chr_y);
    printf("@");

    while (1)
    {
        key = _getch();

        if (key == ARROW)
        {
            key = _getch();
        }

        switch (key)
        {
        case LEFT:
        {
            //원래 방향 그대로
            normal_direction(ptr_x, ptr_y);

            break;
        }
        case RIGHT:
        {
            change_direction(ptr_x, ptr_y);

            break;
        }
        case SMALLZ:
        {
            //방향 바꿔주기
            change_direction(ptr_x, ptr_y);

            break;
        }
        }
    }
    return 0;
}

void print_frame()
{
    char frame_garo = '-';  //가로
    char frame_sero = '|';  //세로

    for (int i = 0; i < 3; ++i)
    {
        printf("\n");
    }

    printf("%13c", frame_garo);
    for (int i = 0; i < 60; ++i)
    {
        printf("%c", frame_garo);
    }
    
    printf("\n");
    printf("%12c %61c\n", frame_sero, frame_sero);
    for (int i = 0; i < 22; ++i)
    {
        printf("%12c %61c\n", frame_sero, frame_sero);
    }

    printf("%13c", frame_garo);
    for (int i = 0; i < 60; ++i)
    {
        printf("%c", frame_garo);
    }
}

void print_normalstair(int x, int y)
{
    int cnt = 0;

    STAIRS* arr = (STAIRS*)malloc(sizeof(STAIRS) * 20);

    for (int i = 0; i < 20; ++i)
    {
        strcpy(arr[i].stair, "###");
    }



    for (int i = 0; i < 20; ++i)
    {
        if (y == 0)
        {
            break;
        }

        gotoxy(x, y);
        printf("%s", arr[i].stair);

        y -= 1;

        int num = (rand() % 100 < 30) ? 0 : 1;
        int num2 = (rand() % 100 < 30) ? 1 : 0;

        //두 번째 칸은 무조건 왼쪽에 나오게
        if (y == 24)
        {
            x -= 3;
        }
        else if (y != 24)
        {
            if (num == num2)
            {
                x += 3;
            }
            else if (num != num2)
            {
                x -= 3;
            }
        }
    }
}

//방향 바꾸기
void change_direction(int* chr_x, int* chr_y)
{
    gotoxy(*chr_x, *chr_y);
    printf(" ");

    *chr_x += 3;
    *chr_y -= 1;

    gotoxy(*chr_x, *chr_y);
    printf("@"); 
}


//원래 방향으로
void normal_direction(int* x, int* y)
{
    gotoxy(*x, *y);
    printf(" ");

    *x -= 3;
    *y -= 1;

    gotoxy(*x, *y);
    printf("@");
}
